type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |-
    package cinema;

    import org.json.*;
    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.bind.annotation.*;

    import java.util.ArrayList;

    @SpringBootApplication
    @RestController
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);

        }

        @GetMapping("/seats")
        @Override
        public String toString() {
            CinemaRoom room = new CinemaRoom(9, 9);
            return room.toString();
        }

    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.json:json:20171018'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: src/cinema/Seat.java
  visible: true
  text: |+
    package cinema;

    import org.json.JSONObject;
    import java.util.ArrayList;
    import java.util.HashMap;

    public class Seat {
        private boolean reserved;
        private int row;
        private int column;
        private JSONObject seat;
        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
            this.seat = new JSONObject();

        }

        public void reserveSeat(){
            this.reserved = true;
        }
        public JSONObject getJson(){
            this.seat.put("row", this.row);
            this.seat.put("column", this.column);
            return this.seat;
        }

        /*public boolean isFree(){
            if (this.reserved == true){
                return false;
            } else {
                return true;
            }
        }*/

        @Override
        public String toString() {

            return this.seat.toString();
        }

    }

  learner_created: false
- name: src/cinema/CinemaRoom.java
  visible: true
  text: |
    package cinema;
    import org.json.*;
    import java.util.ArrayList;


    public class CinemaRoom {
        private final int numberOfRows;
        private final int seatsPerRow;
        private ArrayList<JSONObject> seats;
        private final int numberOfSeats;
        public CinemaRoom(int numberOfRows, int seatsPerRow) {
            this.numberOfRows = numberOfRows;
            this.seatsPerRow = seatsPerRow;
            this.numberOfSeats = this.numberOfRows * this.seatsPerRow;
            this.createSeats();
        }

        public void createSeats(){

            this.seats = new ArrayList<>();
            int i = 0;
            for(int j = 1; j <= this.numberOfRows; j++) {
                for(int k = 1; k <= this.seatsPerRow; k++){
                    this.seats.add(new Seat(j, k).getJson());
                    i++;
                }
            }
        }

        /*public Seat[] getAvailableSeats(){
            Seat[] availableSeats = ArrayList.stream(seats).filter(seat -> seat.isFree()).toArray(Seat[]::new);
            return availableSeats;
        }*/

        @Override
        public String toString() {
            JSONObject obj = new JSONObject();
            obj.put("total_rows", this.numberOfRows);
            obj.put("total_columns", this.seatsPerRow);
            obj.put("available_seats", this.seats);
            return obj.toString();
        }

    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("row", 1)
                        .value("column", 1)
                        .value("price", 10)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds
        };
    }
  learner_created: false
- name: src/cinema/SeatController.java
  visible: true
  text: |
    package cinema;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import org.springframework.web.bind.annotation.*;
    import com.fasterxml.jackson.databind.*;

    @RestController
    public class SeatController {

        @GetMapping("/seats")
        public String returnSeats() {
            CinemaRoom room = new CinemaRoom();
            ObjectMapper mapper = new ObjectMapper();
            String jsonString = null;
            try {
                jsonString = mapper.writeValueAsString(room);
            } catch (JsonProcessingException e) {
                throw new RuntimeException(e);
            }
            return jsonString;
        }
    }
  learner_created: true
- name: src/cinema/ResponseHandler.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13376#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 12 Sep 2022 19:00:17 UTC
record: 2
